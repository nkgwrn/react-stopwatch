{"version":3,"sources":["components/MeasurementButton.js","App.js","index.js"],"names":["MeasurementButton","onClick","value","App","startTime","useState","stopWatchId","setStopWatchId","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds","isRunning","setIsRunning","isReset","setIsReset","diffTime","setDiffTime","countTime","setCountTime","lapTime","setLapTime","countUp","countUpTime","Date","now","upDateMinutes","String","Math","floor","padStart","upDateSeconds","upDateMilliseconds","className","lapTimeText","setInterval","clearInterval","isActive","map","lapTimeItem","index","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RASeA,G,MANW,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAZ,OACxB,4BAAQD,QAASA,GACdC,K,MCqFUC,MAtFf,WAAgB,IAaVC,EAbS,EACyBC,mBAAS,MADlC,mBACNC,EADM,KACOC,EADP,OAGiBF,mBAAS,MAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAIiBJ,mBAAS,MAJ1B,mBAINK,EAJM,KAIGC,EAJH,OAK2BN,mBAAS,OALpC,mBAKNO,EALM,KAKQC,EALR,OAOqBR,oBAAS,GAP9B,mBAONS,EAPM,KAOKC,EAPL,OAQiBV,oBAAS,GAR1B,mBAQNW,EARM,KAQGC,EARH,OAUmBZ,mBAAS,GAV5B,mBAUNa,EAVM,KAUIC,EAVJ,OAWqBd,mBAAS,GAX9B,mBAWNe,EAXM,KAWKC,EAXL,OAYiBhB,mBAAS,IAZ1B,mBAYNiB,EAZM,KAYGC,EAZH,KAePC,EAAU,WACd,IAAMC,EAAcC,KAAKC,MAAQvB,EAAYc,EACvCU,EAAgBC,OAAOC,KAAKC,MAAMN,EAAc,MAAQO,SAAS,EAAE,KACnEC,EAAgBJ,OAAOC,KAAKC,MAAON,EAAc,IAAS,MAAOO,SAAS,EAAG,KAC7EE,EAAqBL,OAAOJ,EAAc,KAAMO,SAAS,EAAG,KAElEX,EAAaI,GACbhB,EAAWmB,GACXjB,EAAWsB,GACXpB,EAAgBqB,IA+BlB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,2BACE,8BAAO3B,GADT,IACyB,8BAAOE,GADhC,IAEE,8BAAOE,KAGX,yBAAKuB,UAAU,aACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CACElC,QAxBQ,WAChB,GAAIe,EACFP,EAAW,MACXE,EAAW,MACXE,EAAgB,OAChBM,EAAY,GACZI,EAAW,QACN,CACL,IAAMa,EAAc5B,EAAU,IAAME,EAAU,IAAME,EACpDW,GAAW,SAACD,GAAD,4BAAiBA,GAAjB,CAA0Bc,SAgB/BlC,MAAOc,EAAU,QAAU,MAC3BA,QAASA,IAEX,kBAAC,EAAD,CACEf,QA5CS,WACG,OAAhBK,GACFF,EAAY,IAAIsB,KAChBnB,EAAe8B,YAAYb,EAAS,KACpCT,GAAa,GACbE,GAAW,KAEXqB,cAAchC,GACdC,EAAe,MACfQ,GAAa,GACbE,GAAW,GACXE,EAAYC,KAkCNlB,MAAOY,EAAY,OAAS,QAC5ByB,SAAUzB,KAGd,wBAAIqB,UAAU,YACXb,EAAQkB,KAAI,SAACC,EAAaC,GAAd,OACX,wBAAIC,IAAKD,GAAQD,UC7E7BG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ca86acff.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./MeasurementButton.css\";\n\nconst MeasurementButton = ({ onClick, value }) => (\n  <button onClick={onClick} >\n    {value}\n  </button>\n);\n\nexport default MeasurementButton;\n","import React, { useState } from \"react\";\nimport MeasurementButton from \"./components/MeasurementButton\";\nimport \"./App.css\";\n\nfunction App() {\n  const [stopWatchId, setStopWatchId] = useState(null);\n\n  const [minutes, setMinutes] = useState(\"00\");\n  const [seconds, setSeconds] = useState(\"00\");\n  const [milliseconds, setMilliseconds] = useState(\"000\");\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [isReset, setIsReset] = useState(true);\n\n  const [diffTime, setDiffTime] = useState(0);\n  const [countTime, setCountTime] = useState(0);\n  const [lapTime, setLapTime] = useState([]);\n  let startTime;\n\n  const countUp = () => {\n    const countUpTime = Date.now() - startTime + diffTime;\n    const upDateMinutes = String(Math.floor(countUpTime / 60000)).padStart(2,\"0\");\n    const upDateSeconds = String(Math.floor((countUpTime % 60000) / 1000)).padStart(2, \"0\");\n    const upDateMilliseconds = String(countUpTime % 1000).padStart(3, \"0\");\n\n    setCountTime(countUpTime);\n    setMinutes(upDateMinutes);\n    setSeconds(upDateSeconds);\n    setMilliseconds(upDateMilliseconds);\n  };\n\n  const timerClick = () => {\n    if (stopWatchId === null) { // Click \"Start\"\n      startTime = new Date();\n      setStopWatchId(setInterval(countUp, 10));\n      setIsRunning(true);\n      setIsReset(false);\n    } else { // Click \"Stop\"\n      clearInterval(stopWatchId);\n      setStopWatchId(null);\n      setIsRunning(false);\n      setIsReset(true);\n      setDiffTime(countTime);\n    }\n  };\n\n  const toolClick = () => {\n    if (isReset) { // Click \"Reset\"\n      setMinutes(\"00\");\n      setSeconds(\"00\");\n      setMilliseconds(\"000\");\n      setDiffTime(0);\n      setLapTime([]);\n    } else { // Click \"Lap\"\n      const lapTimeText = minutes + \":\" + seconds + \".\" + milliseconds;\n      setLapTime((lapTime) => [...lapTime, lapTimeText]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__head\">\n        <p>\n          <span>{minutes}</span>:<span>{seconds}</span>.\n          <span>{milliseconds}</span>\n        </p>\n      </div>\n      <div className=\"App__body\">\n        <div className=\"App__btn\">\n          <MeasurementButton\n            onClick={toolClick}\n            value={isReset ? \"Reset\" : \"Lap\"}\n            isReset={isReset}\n          />\n          <MeasurementButton\n            onClick={timerClick}\n            value={isRunning ? \"Stop\" : \"Start\"}\n            isActive={isRunning}\n          />\n        </div>\n        <ul className=\"App__lap\">\n          {lapTime.map((lapTimeItem, index) => (\n            <li key={index}>{lapTimeItem}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}